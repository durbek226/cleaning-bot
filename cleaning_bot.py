import os
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackContext
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from fpdf import FPDF

# === –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é ===
TOKEN = "8114967909:AAH8uTGzTgZv9tSosSlCQ4nibvqlDUOCqW8"

# === Google Sheets Setup ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name("cleaningbot-firma-3c8cec199501.json", scope)
client = gspread.authorize(creds)
sheet = client.open("CleaningBot_Orders").sheet1

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
clients = {}
order_counter = 100
ADMIN_IDS = [1064450470, 1253874719]  # –¢–≤–æ–π ID –∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
MANAGER_USERNAME = "@rimzi1221"

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID ===
def generate_order_id():
    global order_counter
    last_id = sheet.col_values(1)
    if len(last_id) > 1:
        try:
            last_number = int(last_id[-1].split('-')[-1])
            order_counter = last_number + 1
        except:
            pass
    return f"#DL-{order_counter:04d}"

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id in ADMIN_IDS:
        clients[chat_id] = {"step": "phone"}
        await update.message.reply_text("üîê –†–µ–∂–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\nüìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    else:
        clients[chat_id] = {"step": "waiting_contact"}
        button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
        markup = ReplyKeyboardMarkup(
            [[button], ["üìç –£–∑–Ω–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é", "üè¨ –ù–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã"]], resize_keyboard=True
        )
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Diamond Cleaning!\n–° 2010 –≥–æ–¥–∞ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –ø–æ —Ö–∏–º—á–∏—Å—Ç–∫–µ –≤ –≥–æ—Ä–æ–¥–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:",
            reply_markup=markup
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def handle_buttons(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "üìç –£–∑–Ω–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é":
        await update.message.reply_text("üìç –ì–ª–∞–≤–Ω–∞—è —Ö–∏–º—á–∏—Å—Ç–∫–∞:\nGoogle Maps: https://maps.app.goo.gl/TLCCgqqwsL4k7mfY8\nYandex Maps: https://yandex.uz/maps/-/CHwCjLmg")
    elif text == "üè¨ –ù–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã":
        await update.message.reply_text("üè¨ –§–∏–ª–∏–∞–ª —Ö–∏–º—á–∏—Å—Ç–∫–∏:\nYandex Maps: https://yandex.uz/maps/-/CHwCr0OQ")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ ===
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.contact.phone_number
    clean_phone = phone.replace('+', '').strip()
    values = sheet.get_all_values()
    found = False

    for row in values:
        for cell in row:
            if clean_phone in cell.replace('+', '').strip():
                found = True
                await update.message.reply_text(
                    f"üßæ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!\nID: {row[0]}\n–í–µ—â–∏: {row[2]}\n–î–∞—Ç–∞ —Å–¥–∞—á–∏: {row[3]}\n–ì–æ—Ç–æ–≤–æ: {row[6]}\n–û–ø–ª–∞—Ç–∞: {row[5]}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {row[8] if len(row) > 8 else '‚Äî'}",
                    reply_markup=ReplyKeyboardRemove()
                )
                break
    if not found:
        await update.message.reply_text("üòü –ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        return

    text = update.message.text.replace(" ", "")
    if chat_id not in clients:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    data = clients[chat_id]

    if data["step"] == "phone":
        data["phone"] = text
        data["step"] = "items"
        await update.message.reply_text("üëï –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–∞–ª –∫–ª–∏–µ–Ω—Ç:")

    elif data["step"] == "items":
        data["items"] = update.message.text
        data["step"] = "price"
        await update.message.reply_text("üíµ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (–≤ —Å—É–º–∞—Ö):")

    elif data["step"] == "price":
        data["price"] = text
        data["step"] = "quantity"
        await update.message.reply_text("üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π:")

    elif data["step"] == "quantity":
        data["quantity"] = text
        data["step"] = "date_in"
        await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏:")

    elif data["step"] == "date_in":
        data["date_in"] = text
        data["step"] = "ready_in"
        await update.message.reply_text("‚åõ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ?")

    elif data["step"] == "ready_in":
        data["ready_in"] = text
        data["step"] = "paid"
        await update.message.reply_text("üí∞ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞? (–¥–∞ / –Ω–µ—Ç):")

    elif data["step"] == "paid":
        data["paid"] = text.lower()
        data["step"] = "done"

        order_id = generate_order_id()
        days = int(data["ready_in"])
        ready_date = (datetime.datetime.now() + datetime.timedelta(days=days)).strftime("%d.%m.%Y")
        total = int(data["price"].replace(" ", "")) * int(data["quantity"])

        sheet.append_row([
            order_id,
            data["phone"],
            data["items"],
            data["date_in"],
            days,
            data["paid"],
            ready_date,
            "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            total
        ])

        msg = (
            f"üßæ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n"
            f"üÜî ID: {order_id}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–¥–∞—á–∏: {data['date_in']}\n"
            f"‚åõ –ì–æ—Ç–æ–≤–æ –±—É–¥–µ—Ç: {ready_date}\n"
            f"üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' if data['paid'] == '–¥–∞' else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total:,} —Å—É–º\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Diamond Cleaning!"
        )
        await update.message.reply_text(msg)

# === –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç ===
async def send_monthly_report(context: CallbackContext):
    values = sheet.get_all_values()[1:]
    client_count = len(values)
    item_count = 0
    total_sum = 0
    paid_sum = 0

    for row in values:
        try:
            qty = int(row[4])
            total = int(row[8])
            item_count += qty
            total_sum += total
            if '–¥–∞' in row[5].lower():
                paid_sum += total
        except:
            continue

    unpaid = total_sum - paid_sum
    text = (
        f"üìä –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ Diamond Cleaning\n\n"
        f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {client_count}\nüß∫ –í—Å–µ–≥–æ –≤–µ—â–µ–π: {item_count}\nüíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum:,} —Å—É–º\n"
        f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: {paid_sum:,} —Å—É–º\n‚ùó –û—Å—Ç–∞–ª–æ—Å—å: {unpaid:,} —Å—É–º"
    )
    await context.bot.send_message(chat_id=1253874719, text=text)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler = AsyncIOScheduler()
scheduler.add_job(send_monthly_report, CronTrigger(day=1, hour=7, minute=0), args=[None])
scheduler.start()

# === –ó–∞–ø—É—Å–∫ ===
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
app.add_handler(MessageHandler(filters.TEXT & (filters.Regex("üìç –£–∑–Ω–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é") | filters.Regex("üè¨ –ù–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã")), handle_buttons))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
    app.run_polling()
